//
// Generated by JTB 1.3.2
//

import syntaxtree.*;
import visitor.GJDepthFirst;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class LAVisitor extends GJDepthFirst<String, RegisterAllocationTable> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, RegisterAllocationTable argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, RegisterAllocationTable argu) {
      if ( n.present() ) {
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        	Node nd = e.nextElement();
            // nd.getClass() can be class syntaxtree.Procedure(Main)/Temp(Call)/NodeSequence(Stmt)
            nd.accept(this,argu);
            _count++;
         }
         return String.valueOf(_count);
      }
      else
         return "0";
   }

   public String visit(NodeOptional n, RegisterAllocationTable argu) {
      if ( n.present() ) {
    	  Label l = (Label)n.node;
    	  argu.SetLabel(l.f0.toString());
    	  return null;
    	  //n.node.accept(this,argu);
      }
      else
         return null;
   }

   public String visit(NodeSequence n, RegisterAllocationTable argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         Node nd = e.nextElement();
         argu.newStmt();
         nd.accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, RegisterAllocationTable argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, RegisterAllocationTable argu) {
      String _ret=null;
      argu.SetFunc("MAIN");
      argu.SetArguNum("0");
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, RegisterAllocationTable argu) {
      String _ret=null;
      argu.SetFunc(n.f0.f0.toString());
      argu.SetArguNum(n.f2.f0.toString());
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public String visit(Stmt n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      argu.SetCJump(n.f2.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      argu.SetJump(n.f1.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public String visit(HStoreStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      argu.remove(n.f1.f1.f0.toString());
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      argu.remove(n.f1.f1.f0.toString());
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      argu.newStmt();
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public String visit(Call n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      String argnum = n.f3.accept(this, argu);
      argu.callFunc(Integer.valueOf(argnum));
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public String visit(Operator n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, RegisterAllocationTable argu) {
      String _ret=null;
      argu.insert(n.f1.f0.toString());
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, RegisterAllocationTable argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
